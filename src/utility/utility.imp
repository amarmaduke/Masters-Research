template<typename T>
__host__ __device__
void device_malloc_functor<T>::operator() (thrust::device_ptr<T> ptr)
{
  ptr = thrust::device_malloc<T>(this->size);
}

template<typename T>
__host__
T* pinned_ptr<T>::get() const
{
  return this->data;
}

/*
template<typename T>
__host__
pinned_ptr& pinned_ptr<T>::operator=(const pinned_ptr& ptr)
{
  return *this;
}
*/

template<typename T>
__host__ inline
pinned_ptr<T> pinned_malloc(size_t N)
{
  T* temp;
  check_error(cudaMallocHost(&temp,sizeof(T)*N));
  return pinned_ptr<T>(temp);
}

template<typename T>
__host__ inline
void pinned_free(pinned_ptr<T> ptr)
{
  check_error(cudaFreeHost(ptr.get()));
}

template<typename T>
__host__ inline
void deep_copy(thrust::device_ptr<T> dest,
                      thrust::device_ptr<T> src, size_t N)
{
    check_error(cudaMemcpy( dest.get(),src.get(),sizeof(T)*N,
                            cudaMemcpyDeviceToDevice));
}

template<typename T>
__host__ inline
void deep_copy(thrust::device_ptr<T> dest, T* src, size_t N)
{
  check_error(cudaMemcpy(dest.get(),src,sizeof(T)*N,cudaMemcpyHostToDevice));
}

template<typename T>
__host__ inline
void deep_copy(T* dest, thrust::device_ptr<T> src, size_t N)
{
  check_error(cudaMemcpy(dest,src.get(),sizeof(T)*N,cudaMemcpyDeviceToHost));
}

template<typename T>
__host__ inline
void deep_copy( thrust::device_ptr<T> dest, thrust::device_ptr<T> src, size_t N,
                cudaStream_t s)
{
  check_error(cudaMemcpyAsync(src.get(),dest.get(),sizeof(T)*N,
                              cudaMemcpyDeviceToDevice,s));
}

template<typename T>
__host__ inline
void deep_copy( thrust::device_ptr<T> dest, pinned_ptr<T> src, size_t N,
                cudaStream_t s)
{
  check_error(cudaMemcpyAsync(src.get(),dest.get(),sizeof(T)*N,
                              cudaMemcpyHostToDevice,s));
}

template<typename T>
__host__ inline
void deep_copy( pinned_ptr<T> dest, thrust::device_ptr<T> src, size_t N,
                cudaStream_t s)
{
  check_error(cudaMemcpyAsync(src.get(),dest.get(),sizeof(T)*N,
                              cudaMemcpyDeviceToHost,s));
}

template<typename T>
void print(thrust::device_ptr<T> t, int size)
{
	for(int i = 0; i < size; ++i)
	{
		std::cout << t[i] << " ";
	}
	std::cout << std::endl;
}
